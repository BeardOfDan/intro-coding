#+TITLE: Intro to JS Exercises

* Warmup:

* [[http://codepen.io/jlehman/pen/mVqrmw/?editors=001][Project 1: Book Store]]

** Exercise 1: Building a Table

The Book Store project includes a number of helper functions for constructing a
table of books. Let's explore some of these functions to see how they work.

*a)* Let's start by exploring the dataset that we'll be working with. In the
=INITIALIZATION= section of the project you'll see ~var bookStore =
generateBookStore()~. ~generateBookStore~ is a function that generates the books
that we'll be working with. Open a console and enter the following:

#+begin_src javascript
console.log("The books are:", bookStore);
console.log("The length of the bookStore is:", bookStore.length);
#+end_src

We can use ~console.log~ to see what's happening inside our programs. To see
what was logged, open a console:

#+CAPTION: How to open a console
[[./img/open-console.png]]

What kind of data structure is ~bookStore~? How many books does it contain? What
kind of data structure is each book? Make sure to interact with the logged
output. You should see something like the following:

#+CAPTION: Sample output
[[./img/sample-output-1a.png]]

*b)* A table consists of /rows/ and /columns/. Usually a /header/ will be the
first row, and will indicate what the contents of each column are. A JavaScript
(JS) function has been provided to work with the header of the table called
~setTableHeader~. It takes one argument -- an array of strings that will be
turned into header names. Try entering the following in your code:

#+begin_src javascript
setTableHeader([]);
setTableHeader(["Hello"]);
setTableHeader(["Hello", "World"]);
#+end_src

You've already seen what a single book object looks like. Change the call to
~setTableHeader~ to contain the appropriate header values based the keys present
in each book. Try playing with the order of the header strings -- does the order
matter?

*c)* Now that we have a header, it's time to add the content (the /rows/). A
similar function for accomplishing this is provided: ~setTableBody~. This
function accepts two arguments: an array of objects, and an array of strings
that represent names of keys in each object. Let's play with it a bit:

#+begin_src javascript
var objects = [{a: "Hello", b: "World"}, {a: "Dog", b: "Cat"}, {a: "Orange", b: "Banana"}];
setTableHeader(["A", "B"]);
setTableBody(objects, ["a", "b"]);
#+end_src

Use ~setTableBody~ to display a table of books.

** Exercise 3: Implement a Search Algorithm

#+begin_src javascript
function isMatch(book) {
  return true; // not too helpful
}
#+end_src


a) One way to search our books would be to check if the beginning of the book's
title (=book.title=) was equal to our =query=. JavaScript strings have a method
=substring= that takes two arguments: =begin= and =end=. Try the following at a
console:

#+begin_src javascript
"hello, world".substring(0,3);
"hello, world".substring(3,7);
#+end_src

Given that we can determine the length of our =query= with =query.length=, and
can check equality with ~===~, how can we use =substring= to determine if the
beginning of the book's title matches the =query=?

b) How does your =isMatch= function fare with different cases? Change =isMatch=
to be case-insensitive. Hint: try a search for "javascript lowercase string" in
Google.

c) Modify =isMatch= to search against a different key in the =book= object (e.g.
author). Having to modify the code itself to search against a different field
doesn't seem like a very good solution; ideally we would like to be able to
search by title /or/ author -- fix this by using the logical *or* operator
(~||~) to check against multiple keys at once. Try the following at a console to
get an idea of how ~||~ works:

#+begin_src javascript
true || true
true || false
false || false
var animal = "monkey";
animal === "giraffe" || animal === "monkey"
#+end_src

d) Let's say we're searching for the book "Infinite Jest", and we try searching
for the word "jest" -- does the search work? Why not? Change =isMatch= again so
that it does. The string method =indexOf= can help us here. Try the following to
get an idea of what =indexOf= does:

#+begin_src javascript
"hello, world".indexOf("hello");
"hello, world".indexOf("wor");
"hello, world".indexOf(", w");
"hello, world".indexOf("chimpanzee");
#+end_src
